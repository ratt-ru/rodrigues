# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models, migrations


class Migration(migrations.Migration):

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Simulation',
            fields=[
                ('id', models.AutoField(primary_key=True, verbose_name='ID', serialize=False, auto_created=True)),
                ('name', models.CharField(default='New simulation', max_length=200)),
                ('observatory', models.CharField(choices=[('MK', 'MeerKAT'), ('K7', 'KAT-7'), ('JA', 'JVLA-A')], default='MK', max_length=32)),
                ('output', models.CharField(verbose_name='Output type', choices=[('I', 'Image'), ('V', 'Visibilities')], default='I', max_length=1)),
                ('sefd', models.FloatField(help_text='System defaults will be used if left blank', verbose_name='SEFD', null=True, blank=True)),
                ('sky_type', models.CharField(choices=[('T', 'Tigger-LSM'), ('A', 'ASCII'), ('F', 'FITS'), ('S', 'KATALOG')], default='T', max_length=1)),
                ('sky_model', models.FileField(blank=True, upload_to='sky')),
                ('katalog_id', models.CharField(help_text='Choose from our sky catalogs', blank=True, verbose_name='KATALOG', choices=[('NV', 'nvss6deg'), ('S3', 'scubed1deg'), ('K3', '3c147_field'), ('K4', '3c147_field_no_core')], default='NV', max_length=64)),
                ('radius', models.FloatField(blank=True, help_text='Radius of degrees', verbose_name='Radius', default=0.5)),
                ('fluxrange', models.CharField(help_text='Flux range in Jy', verbose_name='Flux range', default='0.001-1', max_length=32)),
                ('ms_dec', models.CharField(help_text='in dms', verbose_name='Declination', default='-30d0m0s', max_length=32)),
                ('ms_ra', models.CharField(help_text='in hms', verbose_name='Right ascension', default='0h0m0s', max_length=32)),
                ('add_noise', models.BooleanField(default=True)),
                ('vis_noise_std', models.FloatField(help_text='Generates from SEFD if 0', verbose_name='Visibility noise std', default=0)),
                ('ms_synthesis', models.FloatField(help_text='in hours', verbose_name='Synthesis time', default=0.25)),
                ('ms_scan_length', models.FloatField(blank=True, help_text='in hours', verbose_name='Scan length', default=0.25)),
                ('ms_start_time', models.FloatField(blank=True, help_text='in hours', verbose_name='Initial hour angle', default=-0.125)),
                ('ms_dtime', models.IntegerField(help_text='in seconds', verbose_name='Integration time', default=10)),
                ('ms_freq0', models.FloatField(help_text='in MHz', verbose_name='Start frequency', default=700)),
                ('ms_dfreq', models.FloatField(help_text='in kHz', verbose_name='Channel width', default=50000.0)),
                ('ms_nchan', models.IntegerField(help_text='Number of frequency channels per band', verbose_name='Channels per band', default=1)),
                ('ds_amp_phase_gains', models.FloatField(verbose_name='Amplitude Phase Gains', default=1)),
                ('ds_parallactic_angle_rotation', models.BooleanField(verbose_name='Parallactic Angle Rotation', default=True)),
                ('ds_primary_beam', models.CharField(choices=[('M', 'MeerKAT-1'), ('N', 'MeerKAT-2'), ('O', 'MeerKAT-3'), ('K', 'KAT-7'), ('W', 'WSRT'), ('J', 'JVLA')], default='M', max_length=1)),
                ('ds_feed_angle', models.FloatField(verbose_name='Feed angle', default=0)),
                ('cr_amp_phase_gains', models.FloatField(verbose_name='Amplitude Phase Gains', default=1)),
                ('cr_pointing_error', models.FloatField(default=0)),
                ('cr_rfi', models.FloatField(default=0)),
                ('imager', models.CharField(verbose_name='Imager', choices=[('LW', 'LWIMAGER'), ('WS', 'WSCLEAN'), ('CA', 'CASA')], default='LW', max_length=32)),
                ('im_npix', models.IntegerField(help_text='in pixels', verbose_name='Image size', default=512)),
                ('im_cellsize', models.FloatField(help_text='in arcseconds', verbose_name='Pixel size', default=1)),
                ('im_weight', models.CharField(verbose_name='uv-Weighting', choices=[('N', 'Natural'), ('U', 'Uniform'), ('B', 'Briggs')], default='N', max_length=1)),
                ('im_robust', models.FloatField(help_text='Briggs robust parameter', verbose_name='Robust', default=0)),
                ('im_weight_fov', models.FloatField(help_text='in arcminutes', verbose_name='Weight FoV', null=True, blank=True)),
                ('im_wprojplanes', models.IntegerField(verbose_name='w-Projection planes', default=0)),
                ('im_mode', models.CharField(verbose_name='Imaging mode', choices=[('C', 'channel'), ('M', 'mfs'), ('V', 'velocity'), ('F', 'frequency')], default='C', max_length=1)),
                ('im_spwid', models.CharField(verbose_name='Spectral window', default=0, max_length=32)),
                ('channelise', models.IntegerField(help_text='0 means average all, 1 per channel, etc.', verbose_name='Image channelise', default=0)),
                ('im_stokes', models.CharField(verbose_name='Stokes', default='I', max_length=4)),
                ('make_psf', models.BooleanField(verbose_name='Make PSF', default=False)),
                ('lwimager', models.BooleanField(verbose_name='Deconvolve with me!', default=False)),
                ('lwimager_niter', models.IntegerField(verbose_name='NITER', default=1000)),
                ('lwimager_gain', models.FloatField(verbose_name='Loop gain', default=0.1)),
                ('lwimager_threshold', models.FloatField(help_text='In Jy', verbose_name='Clean Threshold', default=0)),
                ('lwimager_operation', models.CharField(verbose_name='Clean algorithm', choices=[('C', 'csclean'), ('H', 'hogbom'), ('D', 'clark'), ('M', 'multiscale')], default='C', max_length=32)),
                ('lwimager_cyclefactor', models.FloatField(verbose_name='Cycle factor', default=1.5)),
                ('lwimager_cyclespeedup', models.FloatField(verbose_name='Cycle speed up', default=-1)),
                ('lwimager_stoppointmode', models.FloatField(verbose_name='Stop point mode,', default=-1)),
                ('lwimager_nscales', models.IntegerField(verbose_name='Scales for MS clean', default=4)),
                ('lwimager_uservector', models.CharField(blank=True, help_text='Comma seperated scales in pixels', verbose_name='Clean scales', null=True, max_length=64)),
                ('wsclean', models.BooleanField(verbose_name='Deconvolve with me!', default=False)),
                ('wsclean_niter', models.IntegerField(verbose_name='NITER', default=1000)),
                ('wsclean_gain', models.FloatField(verbose_name='Minor loop gain', default=0.1)),
                ('wsclean_mgain', models.FloatField(verbose_name='Major loop gain', default=0.1)),
                ('wsclean_threshold', models.FloatField(help_text='In Jy', verbose_name='Clean Threshold', default=0)),
                ('wsclean_joinpolarizations', models.BooleanField(verbose_name='Join polarizations', default=False)),
                ('wsclean_joinchannels', models.BooleanField(verbose_name='Join channels', default=False)),
                ('wsclean_multiscale', models.BooleanField(verbose_name='Multiscale clean', default=False)),
                ('wsclean_multiscale_dash_threshold_dash_bias', models.FloatField(verbose_name='Multi scale threshold bias', default=0.7)),
                ('wsclean_multiscale_dash_scale_dash_bias', models.FloatField(verbose_name='Multi scale bias', default=0.6)),
                ('wsclean_cleanborder', models.FloatField(help_text='In percentage of image width/height', verbose_name='Clean border', default=5)),
                ('wsclean_smallpsf', models.BooleanField(help_text='Resize the psf to speed up minor clean iterations', verbose_name='Small PSF', default=False)),
                ('wsclean_nonegative', models.BooleanField(help_text='Do not allow negative components during cleaning', verbose_name='No negative', default=False)),
                ('wsclean_stopnegative', models.BooleanField(verbose_name='Stop on negative', default=False)),
                ('wsclean_beamsize', models.CharField(blank=True, help_text='In arcseconds', verbose_name='Restoring beam size', null=True, max_length=32)),
                ('casa', models.BooleanField(verbose_name='Deconvolve with me!', default=False)),
                ('casa_niter', models.IntegerField(verbose_name='NITER', default=1000)),
                ('casa_threshold', models.FloatField(verbose_name='Threshold', default=0)),
                ('casa_gain', models.FloatField(help_text='Clean Loop gain', verbose_name='Loop Gain', default='0.1')),
                ('casa_psfmode', models.CharField(verbose_name='PSF mode', choices=[('CL', 'clark'), ('CS', 'clarkstokes'), ('H', 'hogbom')], default='CL', max_length=32)),
                ('casa_imagermode', models.CharField(blank=True, verbose_name='Imager mode', choices=[('C', 'csclean'), ('M', 'mosiac')], default='csclean', max_length=32)),
                ('casa_gridmode', models.CharField(help_text='A-projection only works JVLA', blank=True, verbose_name='Grid mode', choices=[('W', 'widefield'), ('A', 'aprojection')], default='W', max_length=32)),
                ('casa_nterms', models.IntegerField(help_text='See CASA clean task', verbose_name='NTERMS', default=1)),
                ('casa_reffreq', models.FloatField(verbose_name='MFS ref Frequency', null=True, blank=True)),
                ('casa_multiscale', models.CharField(blank=True, help_text='Deconvolution scales in pixels', verbose_name='Multiscale', null=True, max_length=200)),
                ('casa_negcomponent', models.FloatField(help_text='See CASA clean task', verbose_name='Negative Components', default=-1)),
                ('casa_smallscalebias', models.FloatField(help_text='See CASA clean task', verbose_name='Small scale bias', default=0.6)),
                ('casa_restoringbeam', models.CharField(blank=True, verbose_name='Restoring beam', null=True, max_length=32)),
                ('casa_cyclefactor', models.FloatField(verbose_name='Cycle factor', default=1.5)),
                ('casa_cyclespeedup', models.FloatField(verbose_name='Cycle speed up', default=-1)),
                ('moresane', models.BooleanField(verbose_name='Deconvolve with me!', default=False)),
                ('moresane_scalecount', models.IntegerField(help_text='See MORESANE help', verbose_name='Scale count', null=True, blank=True)),
                ('moresane_subregion', models.IntegerField(help_text='Inner region to deconvolve in pixels', verbose_name='Sub region', null=True, blank=True)),
                ('moresane_startscale', models.FloatField(verbose_name='Start scale', default=1)),
                ('moresane_stopscale', models.FloatField(verbose_name='Stop scale', default=20)),
                ('moresane_sigmalevel', models.FloatField(help_text='in sigma above noise', verbose_name='Threshold level', default=3)),
                ('moresane_loopgain', models.FloatField(verbose_name='Loop gain', default='0.1')),
                ('moresane_tolerance', models.FloatField(verbose_name='Tolerance', default=0.75)),
                ('moresane_accuracy', models.FloatField(verbose_name='Accuracy', default=1e-06)),
                ('moresane_majorloopmiter', models.IntegerField(verbose_name='Major loop iterations', default=100)),
                ('moresane_minorloopmiter', models.IntegerField(verbose_name='Minor loop iterations', default=50)),
                ('moresane_convmode', models.CharField(verbose_name='Convolution mode', choices=[('C', 'circular'), ('L', 'linear')], default='C', max_length=32)),
                ('moresane_enforcepositivity', models.BooleanField(verbose_name='Enforce Positivity', default=False)),
                ('moresane_edgesupression', models.BooleanField(verbose_name='Edge Suppression', default=False)),
                ('moresane_edgeoffset', models.FloatField(verbose_name='Edge offset', default=0)),
                ('moresane_mfs', models.BooleanField(help_text='Comes with an spi map', verbose_name='MFS map', default=False)),
                ('moresane_spi_dash_sigmalevel', models.FloatField(help_text='In sigma above noise', verbose_name='spi threshold level', default=10)),
                ('state', models.CharField(choices=[('S', 'scheduled'), ('R', 'running'), ('C', 'crashed'), ('F', 'finished')], default='S', max_length=1)),
                ('started', models.DateTimeField(blank=True, null=True)),
                ('finished', models.DateTimeField(blank=True, null=True)),
                ('log', models.FileField(blank=True, null=True, upload_to='')),
                ('console', models.TextField(blank=True, null=True)),
                ('task_id', models.CharField(blank=True, null=True, max_length=36)),
                ('results_uvcov', models.FileField(blank=True, null=True, upload_to='uvcov')),
                ('results_lwimager_dirty', models.FileField(blank=True, null=True, upload_to='lwimager_dirty')),
                ('results_lwimager_model', models.FileField(blank=True, null=True, upload_to='lwimager_model')),
                ('results_lwimager_residual', models.FileField(blank=True, null=True, upload_to='lwimager_residual')),
                ('results_lwimager_restored', models.FileField(blank=True, null=True, upload_to='lwimager_restored')),
                ('results_casa_dirty', models.FileField(blank=True, null=True, upload_to='casa_dirty')),
                ('results_casa_model', models.FileField(blank=True, null=True, upload_to='casa_model')),
                ('results_casa_residual', models.FileField(blank=True, null=True, upload_to='casa_residual')),
                ('results_casa_restored', models.FileField(blank=True, null=True, upload_to='casa_restored')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
    ]
